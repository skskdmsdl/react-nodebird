{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      contnet: faker.lorem.paragraph,\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10)); // 더미데이터 생성\n// initialState.mainPosts = initialState.mainPosts.concat(\n//   Array(20).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     contnet: faker.lorem.paragraph,\n//     Images: [{\n//       src: faker.image.image(),\n//     }],\n//     Comments: [{\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//       },\n//       content: faker.lorem.sentence(),\n//     }],\n//   })),\n// );\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'kimgo'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'kimgo'\n    }\n  };\n}; // reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n// state 이름이 draft로 바뀌고, draft는 불변성 상관 없이 막 바꿔도 됨(알아서 불변성 유지해줌)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts); // action.data(더미데이터)와 기존데이터 합쳐줌\n\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          }); // 게시글 찾기\n\n          post.Comments.unshift(dummyComment(action.data.content)); // 게시글 추가하기\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","contnet","lorem","paragraph","Images","src","image","Comments","content","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","length","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  contnet: faker.lorem.paragraph,\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\n// 더미데이터 생성\r\n// initialState.mainPosts = initialState.mainPosts.concat(\r\n//   Array(20).fill().map(() => ({\r\n//     id: shortId.generate(),\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     contnet: faker.lorem.paragraph,\r\n//     Images: [{\r\n//       src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//       User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.name.findName(),\r\n//       },\r\n//       content: faker.lorem.sentence(),\r\n//     }],\r\n//   })),\r\n// );\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'kimgo',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'kimgo',\r\n  },\r\n});\r\n\r\n// reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\n// state 이름이 draft로 바뀌고, draft는 불변성 상관 없이 막 바꿔도 됨(알아서 불변성 유지해줌)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts); // action.data(더미데이터)와 기존데이터 합쳐줌\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId); // 게시글 찾기\r\n      post.Comments.unshift(dummyComment(action.data.content)); // 게시글 추가하기\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}