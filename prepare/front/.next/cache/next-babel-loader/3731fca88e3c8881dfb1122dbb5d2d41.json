{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // action을 실행하기 전에 console.log를 찍어주는 middleware\n// redux-devtools를 대체 할 수 있음\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action);\n//   return next(action);\n// };\n\nconst configureStore = context => {\n  const sagaMiddleware = createSagaMiddleware(); // saga에서 추가된 부분\n\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga에서 추가된 부분\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,cAAc,GAAGL,oBAAoB,EAA3C,CADkC,CACa;;AAC/C,QAAMM,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACbV,OAAO,CAACC,eAAe,CAAC,GAAGQ,WAAJ,CAAhB,CADM,GAEbP,mBAAmB,CACnBD,eAAe,CAAC,GAAGQ,WAAJ,CADI,CAFvB;AAKA,QAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBR,QAAnB,CAAjB,CATkC,CASa;;AAC/C,SAAOM,KAAP;AACD,CAXD;;AAaA,MAAMG,OAAO,GAAGhB,aAAa,CAACQ,cAAD,EAAiB;AAC5CS,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\n// action을 실행하기 전에 console.log를 찍어주는 middleware\r\n// redux-devtools를 대체 할 수 있음\r\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n//   console.log(action);\r\n//   return next(action);\r\n// };\r\n\r\nconst configureStore = (context) => {\r\n  const sagaMiddleware = createSagaMiddleware(); // saga에서 추가된 부분\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(\r\n      applyMiddleware(...middlewares),\r\n    );\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga에서 추가된 부분\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}