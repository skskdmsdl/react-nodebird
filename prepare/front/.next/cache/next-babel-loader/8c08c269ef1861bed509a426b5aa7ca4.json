{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  // *쓰면 에러남\n  return axios.post('/api/login', data); // 실제 서버에 요청 보냄\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);    // call(함수, 함수에 들어가는 매개변수, 매개변수,...)\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE' // data: err.response.data,\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS' // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE' // data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); // thunk의 비동기 actionCreator\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","put","delay","axios","logInAPI","data","post","logIn","action","type","err","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAAoB;AACxC,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADoB,CACsB;AAC7C;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOK,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,SAASE,SAAT,GAAqB;AACjB,SAAOR,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUM,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOC,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,UAAV,GAAuB;AACnB,QAAMb,UAAU,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB,CADmB,CAC2B;AACjD;;AAED,UAAUO,WAAV,GAAwB;AACpB,QAAMd,UAAU,CAAC,iBAAD,EAAoBY,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMjB,GAAG,CAAC,CACNC,IAAI,CAACc,UAAD,CADE,EAENd,IAAI,CAACe,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, takeLatest, put, delay } from 'redux-saga/effects'\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI(data) {                   // *쓰면 에러남\r\n    return axios.post('/api/login', data);    // 실제 서버에 요청 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try{\r\n        // const result = yield call(logInAPI, action.data);    // call(함수, 함수에 들어가는 매개변수, 매개변수,...)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            // data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {                  \r\n    return axios.post('/api/logout');    \r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            // data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            // data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);    // thunk의 비동기 actionCreator\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}