{"ast":null,"code":"var _jsxFileName = \"E:\\\\workspace\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\CommentForm.js\";\nvar __jsx = React.createElement;\nimport { Button, Form, Input } from 'antd';\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    addCommentDone,\n    addCommentLoading\n  } = useSelector(state => state.post);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // custom hook사용으로 useState와 useCallback 조합해서 사용하던걸 줄일 수 있음\n\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        userId: id,\n        postId: post.id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      position: 'relative',\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      bottom: -40\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/components/CommentForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","PropTypes","useDispatch","useSelector","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","addCommentDone","addCommentLoading","state","id","user","me","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","userId","postId","position","margin","right","bottom","propTypes","object","isRequired"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAwCP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACJ,IAAlB,CAAzD;AACA,QAAMK,EAAE,GAAGT,WAAW,CAAEQ,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACE,IAAN,CAAWC,EAAtB,mDAAW,eAAeF,EAA1B;AAAA,GAAD,CAAtB,CAHgC,CAIhC;;AACA,QAAM,CAACG,WAAD,EAAcC,mBAAd,EAAmCC,cAAnC,IAAqDb,QAAQ,CAAC,EAAD,CAAnE;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,cAAJ,EAAoB;AAClBQ,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACR,cAAD,CAJM,CAAT;AAMA,QAAMS,eAAe,GAAGnB,WAAW,CAAC,MAAM;AACxCS,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEd,mBADC;AAEPe,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEN,WAAX;AAAwBO,QAAAA,MAAM,EAAEV,EAAhC;AAAoCW,QAAAA,MAAM,EAAEhB,IAAI,CAACK;AAAjD;AAFC,KAAD,CAAR;AAID,GALkC,EAKhC,CAACG,WAAD,EAAcH,EAAd,CALgC,CAAnC;AAOA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEM,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAE;AAAEM,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE;AAAhC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAEV,WAAhC;AAA6C,IAAA,QAAQ,EAAEC,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAQ,EAAE,UAAZ;AAAwBE,MAAAA,KAAK,EAAE,CAA/B;AAAkCC,MAAAA,MAAM,EAAE,CAAC;AAA3C,KADT;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,QAAQ,EAAC,QAHX;AAIE,IAAA,OAAO,EAAEjB,iBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF,CADF;AAcD,CAlCD;;AAoCAJ,WAAW,CAACsB,SAAZ,GAAwB;AACtBrB,EAAAA,IAAI,EAAEN,SAAS,CAAC4B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAexB,WAAf","sourcesContent":["import { Button, Form, Input } from 'antd';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport useInput from '../hooks/useInput';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { addCommentDone, addCommentLoading } = useSelector((state) => state.post);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  // custom hook사용으로 useState와 useCallback 조합해서 사용하던걸 줄일 수 있음\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText('');\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, userId: id, postId: post.id },\r\n    });\r\n  }, [commentText, id]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item style={{ position: 'relative', margin: 0 }}>\r\n        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n        <Button\r\n          style={{ position: 'absolute', right: 0, bottom: -40 }}\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          loading={addCommentLoading}\r\n        >삐약\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}