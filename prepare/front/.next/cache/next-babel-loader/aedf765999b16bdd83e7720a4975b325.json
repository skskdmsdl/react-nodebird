{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'kimgo'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://cdn.pixabay.com/photo/2016/02/10/16/37/cat-1192026_960_720.jpg'\n    }, {\n      src: 'https://cdn.pixabay.com/photo/2019/05/08/21/21/cat-4189697_960_720.jpg'\n    }, {\n      src: 'https://cdn.pixabay.com/photo/2020/10/05/10/51/cat-5628953_960_720.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nimo'\n      },\n      content: '냐옹'\n    }, {\n      User: {\n        nickname: 'dori'\n      },\n      content: '캭'\n    }],\n    imagePaths: [],\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null\n  }]\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = {\n  id: 2,\n  content: '더미데이터입니다.',\n  User: {\n    id: 1,\n    nickname: 'kimgo'\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n          // 앞에 추가를 해줘야 게시글 위에 올라감\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_REQUEST:\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","postAdded"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFE;AAMRC,IAAAA,OAAO,EAAE,uBAND;AAORC,IAAAA,MAAM,EAAE,CAAC;AACLC,MAAAA,GAAG,EAAE;AADA,KAAD,EAEL;AACCA,MAAAA,GAAG,EAAE;AADN,KAFK,EAIL;AACCA,MAAAA,GAAG,EAAE;AADN,KAJK,CAPA;AAcRC,IAAAA,QAAQ,EAAE,CAAC;AACPL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADC;AAIPC,MAAAA,OAAO,EAAE;AAJF,KAAD,EAKP;AACCF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADP;AAICC,MAAAA,OAAO,EAAE;AAJV,KALO,CAdF;AAyBRI,IAAAA,UAAU,EAAE,EAzBJ;AA0BRC,IAAAA,cAAc,EAAE,KA1BR;AA2BRC,IAAAA,WAAW,EAAE,KA3BL;AA4BRC,IAAAA,YAAY,EAAE;AA5BN,GAAD;AADa,CAArB;AAiCP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAC9BC,IAAAA,IAAI,EAAER,gBADwB;AAE9BO,IAAAA,IAAI,EAAJA;AAF8B,GAAX;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACjCC,IAAAA,IAAI,EAAEL,mBAD2B;AAEjCI,IAAAA,IAAI,EAAJA;AAFiC,GAAX;AAAA,CAAnB;AAKP,IAAMG,SAAS,GAAG;AACdrB,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,WAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdE,EAAAA,MAAM,EAAE,EAPM;AAQdE,EAAAA,QAAQ,EAAE;AARI,CAAlB;;AAWA,IAAMgB,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBzB,YAAyB;AAAA,MAAX0B,MAAW;;AAC9C,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKR,gBAAL;AACA,SAAKC,gBAAL;AAAuB;AACnB,+CACOW,KADP;AAEIxB,UAAAA,SAAS,GAAGsB,SAAH,4BAAiBE,KAAK,CAACxB,SAAvB,EAFb;AAEoD;AAChD0B,UAAAA,SAAS,EAAE;AAHf;AAKH;;AACD,SAAKd,gBAAL;AACA;AAAS;AACL,iCACOY,KADP;AAGH;AAdL;AAgBH,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'kimgo',\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [{\r\n            src: 'https://cdn.pixabay.com/photo/2016/02/10/16/37/cat-1192026_960_720.jpg',\r\n        }, {\r\n            src: 'https://cdn.pixabay.com/photo/2019/05/08/21/21/cat-4189697_960_720.jpg',\r\n        }, {\r\n            src: 'https://cdn.pixabay.com/photo/2020/10/05/10/51/cat-5628953_960_720.jpg',\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                nickname: 'nimo',\r\n            },\r\n            content: '냐옹',\r\n        }, {\r\n            User: {\r\n                nickname: 'dori',\r\n            },\r\n            content: '캭',\r\n        }],\r\n        imagePaths: [],\r\n        addPostLoading: false,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n    }],\r\n}\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: '더미데이터입니다.',\r\n    User: {\r\n        id: 1,\r\n        nickname: 'kimgo'\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST: \r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],     // 앞에 추가를 해줘야 게시글 위에 올라감\r\n                postAdded: true,\r\n            };\r\n        }\r\n        case ADD_POST_REQUEST: \r\n        default: {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}