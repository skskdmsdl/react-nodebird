{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"E:\\\\workspace\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCardContent.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\n\nvar PostCardContent = function PostCardContent(_ref) {\n  var postData = _ref.postData;\n  return (// 첫 번째 게시글 #해시태그 #익스프레스\n    __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 3\n      }\n    }, postData.split(/(#[^\\s#]+)/g).map(function (v) {\n      if (v.match(/(#[^\\s#]+)/)) {\n        // 반복문이 바뀔리 없는 상황이라면 index를 key로 써도 괜찮음\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          key: v,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 11\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }\n        }, v));\n      }\n\n      return v;\n    }))\n  );\n};\n\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/components/PostCardContent.js"],"names":["React","Link","PropTypes","PostCardContent","postData","split","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAAoB;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,QAAQ,CAACC,KAAT,CAAe,aAAf,EAA8BC,GAA9B,CAAkC,UAACC,CAAD,EAAO;AACxC,UAAIA,CAAC,CAACC,KAAF,CAAQ,YAAR,CAAJ,EAA2B;AACzB;AACA,eACE,MAAC,IAAD;AACE,UAAA,IAAI,EAAE;AAAEC,YAAAA,QAAQ,EAAE,UAAZ;AAAwBC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,GAAG,EAAEJ,CAAC,CAACK,KAAF,CAAQ,CAAR;AAAP;AAA/B,WADR;AAEE,UAAA,EAAE,qBAAcL,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAd,CAFJ;AAGE,UAAA,GAAG,EAAEL,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,CAAJ,CALF,CADF;AASD;;AACD,aAAOA,CAAP;AACD,KAdA,CADH;AADsB;AAAA,CAAxB;;KAAMJ,e;AAoBNA,eAAe,CAACU,SAAhB,GAA4B;AAAET,EAAAA,QAAQ,EAAEF,SAAS,CAACY,MAAV,CAAiBC;AAA7B,CAA5B;AAEA,eAAeZ,eAAf","sourcesContent":["import React from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PostCardContent = ({ postData }) => ( // 첫 번째 게시글 #해시태그 #익스프레스\r\n  <div>\r\n    {postData.split(/(#[^\\s#]+)/g).map((v) => {\r\n      if (v.match(/(#[^\\s#]+)/)) {\r\n        // 반복문이 바뀔리 없는 상황이라면 index를 key로 써도 괜찮음\r\n        return (\r\n          <Link\r\n            href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\r\n            as={`/hashtag/${v.slice(1)}`}\r\n            key={v}\r\n          >\r\n            <a>{v}</a>\r\n          </Link>\r\n        );\r\n      }\r\n      return v;\r\n    })}\r\n  </div>\r\n);\r\n\r\nPostCardContent.propTypes = { postData: PropTypes.string.isRequired };\r\n\r\nexport default PostCardContent;\r\n"]},"metadata":{},"sourceType":"module"}