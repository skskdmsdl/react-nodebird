{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // action을 실행하기 전에 console.log를 찍어주는 middleware\n// redux-devtools를 대체 할 수 있음\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = context => {\n  const sagaMiddleware = createSagaMiddleware(); // saga에서 추가된 부분\n\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga에서 추가된 부분\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["E:/workspace/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","context","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACvEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAHH;;AAKA,MAAMG,cAAc,GAAIC,OAAD,IAAa;AAChC,QAAMC,cAAc,GAAGZ,oBAAoB,EAA3C,CADgC,CACgB;;AAChD,QAAMa,WAAW,GAAG,CAACD,cAAD,EAAiBT,gBAAjB,CAApB;AACA,QAAMW,QAAQ,GAAG,QACfjB,OAAO,CAACC,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CADQ,GAEfd,mBAAmB,CACjBD,eAAe,CAAC,GAAGe,WAAJ,CADE,CAFrB;AAKA,QAAME,KAAK,GAAGnB,WAAW,CAACK,OAAD,EAAUa,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBf,QAAnB,CAAjB,CATgC,CASgB;;AAChD,SAAOa,KAAP;AACH,CAXD;;AAaA,MAAMG,OAAO,GAAGvB,aAAa,CAACe,cAAD,EAAiB;AAC1CS,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\n// action을 실행하기 전에 console.log를 찍어주는 middleware\r\n// redux-devtools를 대체 할 수 있음\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n  };\r\n\r\nconst configureStore = (context) => {\r\n    const sagaMiddleware = createSagaMiddleware();  // saga에서 추가된 부분\r\n    const middlewares = [sagaMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(\r\n        applyMiddleware(...middlewares),\r\n    );\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);  // saga에서 추가된 부분\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}