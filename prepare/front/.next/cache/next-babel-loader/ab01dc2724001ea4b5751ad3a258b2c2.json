{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // action을 실행하기 전에 console.log를 찍어주는 middleware\n// redux-devtools를 대체 할 수 있음\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action);\n//   return next(action);\n// };\n\nvar configureStore = function configureStore(context) {\n  console.log(context);\n  var sagaMiddleware = createSagaMiddleware(); // saga에서 추가된 부분\n\n  var middlewares = [sagaMiddleware];\n  var enhancer = true ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga에서 추가된 부분\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: false\n});\nexport default wrapper;","map":null,"metadata":{},"sourceType":"module"}